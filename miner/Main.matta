! (import! &kb kb)

(= minsup 2)

! (add-reduct &self (= (pattern-space) (new-space)))

(= (pattern $x $y)
(match &kb (Inheritance $x $y) (Inheritance $x $y) ))
!(pattern $x $y)

(= (count Nill $val) $val)
(= (count $x $val)(
    count (cdr-atom $x) (+ $val 1)
))

(= (valuation $x $y)
(let* (($x1 $y1))
     ((pattern $x $y) $x)
     ((pattern $x $y) $y)
     (= valX (cons-atom x -> $x1))
     (= valY (cons-atom y -> $y1)))
      cons-atom valX valY )

!(valuation $x $y)

(= shab
(let* ($shabX shabY)
      ((pattern $x $y ) $x)
      ((pattern $x $y ) $y))
      (= $mshabX (cons-atom shabX y ))
      (= shabX| (cons-atom $mshabX  |))
      cons-atom shabX| shabY ))

!(shab)

(= (specialize $shab $endX) (
(= val (car-atom $shab))
  if((&& (!= val |) (!endX))) ((specializeY val)(specialize (cdr-atom $shab) False)) ( if(== val | )(specialize (cdr-atom $shab) True) ((specializeX val)(specialize (cdr-atom $shab) True)))))

(= (specializeX $x)
(add-atom (pattern-space)(= (pattern $y)(Inheritance $x $y))))

(= (specializeY $y)
(add-atom (pattern-space)( = (pattern $x)(Inheritance $x $y))))
