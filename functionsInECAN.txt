void ExperimentSetupModule::AVChangedCBListener(const Handle& h,
                                                const AttentionValuePtr& av_old,
                                                const AttentionValuePtr& av_new)
{
    NodePtr node;
    std::string name;

    if (h->isNode()) {
        node = NodeCast(h);
        name = node->getName();
        if (name.find("@") == std::string::npos)
        {
            std::ofstream outav(file_name + "-av.data", std::ofstream::app);
            outav << name << ","
                 << av_new->getSTI() << ","
                 << av_new->getLTI() << ","
                 << av_new->getVLTI() << ","
                 << system_clock::now().time_since_epoch().count() << ","
                 << current_group << ","
                 << _as->get_attentional_focus_boundary() << "\n";
            outav.close();
        }
    }
}


In this function what is going on is that it listens for the given node's Attention value in the Atomspace and if it's Attention Value got changed it will append this value into file including its STI, LTI, timestamp, group and attentional focus group. this all operation is performed if the given handle is a node.


void ExperimentSetupModule::TVChangedCBListener(const Handle& h,
                                                const TruthValuePtr& tv_old,
                                                const TruthValuePtr& tv_new)
{
    if (h->getType() == ASYMMETRIC_HEBBIAN_LINK) {
        HandleSeq outg = LinkCast(h)->getOutgoingSet();
        assert(outg.size() == 2);

        if (!outg[0]->isNode() or !outg[1]->isNode())
            return;
        std::string nn0 = NodeCast(outg[0])->getName();
        std::string nn1 = NodeCast(outg[1])->getName();

        if (boost::starts_with(nn0, "group") and boost::starts_with(nn1, "group")
            and !boost::contains(nn0,"@") and !boost::contains(nn1,"@"))
        {
            std::ofstream outheb(file_name + "-hebtv.data", std::ofstream::app);
            outheb << h.value() << ","
                   << nn0 << ","
                   << nn1 << ","
                   << tv_new->getMean() << ","
                   << tv_new->getConfidence() << ","
                   << system_clock::now().time_since_epoch().count() << "\n";
            outheb.close();
        }
    }
}

This is a callback function that gets triggered when a TruthValue changes in the system. It takes three parameters: A handle to the atom being modified, The old TruthValue, The new TruthValue
Main Logic:
First checks if the atom type is an ASYMMETRIC_HEBBIAN_LINK. Gets the outgoing set (connected nodes) from the link. Verifies there are exactly two nodes (assert statement)
Checks if both outgoing connections are nodes
Extracts names of both nodes
Verifies if both node names: Start with "group" and Don't contain "@" symbol
If all conditions are met, it logs the following information to a file (named with "-hebtv.data" suffix): Handle value, First node name, Second node name, New TruthValue's mean, New TruthValue's confidence and Current timestamp

void SentenceGenStimulateAgent::generate_stimulate_sentence()
{
    HandleSeq hwords;
    HandleSeq hword_instances;
    StringSeq selected_words;

    auto evalWord = [this](std::string word) -> Handle {
        return _scm_eval->eval_h("(ConceptNode \"" + word + "\")");
    };

    auto select = [](int num,StringSeq &data,StringSeq &out) -> void {
        int rnd;
        for (int i = 0; i < num;++i){
            rnd = rand() % data.size();
            out.push_back(data[rnd]);
        }
    };

    if (time(nullptr) > stime + 5) {
        current_group = (current_group + 1) % swords.size();
        if (current_group == 0)
            this_thread::sleep_for(seconds(5));
        stime = time(nullptr);
    }

    if (_cogserver.getCycleCount() % special_word_occurence_period == 0) { // and
    //(_cogserver.getCycleCount() - startcount) > 5 ) {
      select(4,swords[current_group],selected_words);
      select(2,words,selected_words);
    } else {
        select(6,words,selected_words);
    }

    for (std::string word : selected_words) {
        hwords.push_back(evalWord(word));
        hword_instances.push_back(evalWord(word + "@" + std::to_string(rand())));
    }

    for (Handle h : hwords)
        _as->stimulate(h,2);
    for (Handle h : hword_instances)
        _as->stimulate(h,0.5);
    this_thread::sleep_for(milliseconds(400));

    printf("stifunds: %ld \n",_as->get_STI_funds());
}
The code tries to monitor STI changes based on the word group which are Conceptual word and Instance word. Conceptual word is given the highest stimulation value.
It manages different word groups. Alternates between special and regular word patterns. Creates both concept and instance nodes. Applies different levels of stimulation. Monitors the system's attention resources (STI funds)
void ImportanceDiffusionBase::diffuseAtom(Handle source)
{
    // (1) Find the incident atoms that will be diffused to
    HandleSeq incidentAtoms =
            ImportanceDiffusionBase::incidentAtoms(source);

    // (2) Find the hebbian adjacent atoms that will be diffused to
    HandleSeq hebbianAdjacentAtoms =
            ImportanceDiffusionBase::hebbianAdjacentAtoms(source);

    // (3) Calculate the probability vector that determines what proportion to
    //     diffuse to each incident atom
    std::map<Handle, double> probabilityVectorIncident =
            ImportanceDiffusionBase::probabilityVectorIncident(
                incidentAtoms);

#ifdef DEBUG
    std::cout << "Calculating diffusion for handle # " << source.value() <<
                 std::endl;
    std::cout << "Incident probability vector contains " <<
                 probabilityVectorIncident.size() << " atoms." << std::endl;
#endif

    // (4) Calculate the probability vector that determines what proportion to
    //     diffuse to each hebbian adjacent atom
    std::map<Handle, double> probabilityVectorHebbianAdjacent =
            ImportanceDiffusionBase::probabilityVectorHebbianAdjacent(
                source, hebbianAdjacentAtoms);

#ifdef DEBUG
    std::cout << "Hebbian adjacent probability vector contains " <<
                 probabilityVectorHebbianAdjacent.size() << " atoms." <<
                 std::endl;
#endif

    // (5) Combine the two probability vectors into one according to the
    //     configuration parameters
    std::map<Handle, double> probabilityVector = combineIncidentAdjacentVectors(
                probabilityVectorIncident, probabilityVectorHebbianAdjacent);

#ifdef DEBUG
    std::cout << "Probability vector contains " << probabilityVector.size() <<
                 " atoms." << std::endl;
#endif

    // (6) Calculate the total amount that will be diffused
    AttentionValue::sti_t totalDiffusionAmount =
            calculateDiffusionAmount(source);

#ifdef LOG_AV_STAT
    // Log sti gain from spreading via  non-hebbian links
    for(const auto& kv : probabilityVectorIncident){
        if(atom_avstat.find(kv.first) == atom_avstat.end()){
            AVStat avstat;
            avstat.link_sti_gain = kv.second;
            atom_avstat[kv.first] = avstat;
        }
        atom_avstat[kv.first].link_sti_gain += kv.second;
    }

    // Log sti gain from spreading via hebbian links
    for(const auto& kv : probabilityVectorHebbianAdjacent){
        if(atom_avstat.find(kv.first) == atom_avstat.end()){
            AVStat avstat;
            avstat.heblink_sti_gain = kv.second;
            atom_avstat[kv.first] = avstat;
        }
        atom_avstat[kv.first].heblink_sti_gain += kv.second;
    }

    // Log amount of sti spread from
    if(atom_avstat.find(source) == atom_avstat.end()){
        AVStat avstat;
        avstat.spreading = totalDiffusionAmount;
        atom_avstat[source] = avstat;
    }
    atom_avstat[source].spreading += totalDiffusionAmount;
#endif

#ifdef DEBUG
    std::cout << "Total diffusion amount: " << totalDiffusionAmount << std::endl;
#endif

    /* ===================================================================== */

    // If there is nothing to diffuse, finish
    if (totalDiffusionAmount == 0)
    {
        return;
    }

    // Perform diffusion from the source to each atom target
    for( const auto& p : probabilityVector)
    {
        DiffusionEventType diffusionEvent;

        // Calculate the diffusion amount using the entry in the probability
        // vector for this particular target (stored in iterator->second)
        diffusionEvent.amount = (AttentionValue::sti_t)
                (totalDiffusionAmount * p.second);

        diffusionEvent.source = source;
        diffusionEvent.target = p.first;

        // Add the diffusion event to a stack. The diffusion is stored in a
        // stack, so that all the diffusion events can be processed after the
        // diffusion calculations are complete. Otherwise, the diffusion
        // amounts will be calculated in a different way than expected.
        diffusionStack.push(diffusionEvent);
    }

    /* ===================================================================== */

    // TODO: What if the STI values of the atoms change during these updates?
    // This could go wrong if there were simultaneous updates in other threads.

    // TODO: Support inverse hebbian links
}
Steps this code does 
Step 1: Finds regular connected atoms
Step 2: Finds hebbian-learning connected atoms
Step 3: Calculates diffusion probabilities for regular connections
Step 4: Calculates diffusion probabilities for hebbian connections
Step 5: Combines both probability vectors
Step 6: Calculates total amount to diffuse

std::string ExperimentSetupModule::do_start_exp(Request *req,
                                                std::list<std::string> args)
{
    int groups;
    int groupsize;
    int wordcount;
    std::string output;
    if (args.size() != 3){
        groups = 10;
        groupsize = 10;
        wordcount = 100;
        output = output + "Using Default Configuration \n";
    } else {
        groups = std::stoi(args.front());
        args.pop_front();
        groupsize = std::stoi(args.front());
        args.pop_front();
        wordcount =  std::stoi(args.front());
    }
    genWords(groups,groupsize,wordcount);

    std::ofstream outf(file_name + "-av.data", std::ofstream::trunc);
    outf << groups << ","
         << groupsize << ","
         << wordcount << "\n";
    outf.flush();
    outf.close();

    remove((file_name + "-hebtv.data").c_str());

    _cs.startAgent(_sentencegenstim_agentptr);

    output = output + "Started opencog::SentenceGenStimulateAgent\n";

    return output;
}
Used to start the experiment. accepts args from the CMD if provided. The args that can be provided are groups, groupsize and wordcount of the experiment. the system also logs the those data into groups, groupsize and wordcount. finally returns the start of the string as String. 

